# -*- coding: utf-8 -*-
"""Exemplo DBSCAN Dataset Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sZsHyQmzobcRkURD22-x1dPb8l2kHhf7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from sklearn import datasets
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import NearestNeighbors

iris = datasets.load_iris()
dados = iris.data

print(iris.feature_names)

#0 - setosa
#1 - versicolor
#2 - virginica
print(iris.target_names)

#Dataframe que armazena os atributos das especies de flores, normalmente chamamos esse tipo de dado de variável x
df_flores =pd.DataFrame(iris.data)
df_flores.columns=['sepal_Length','sepal_width','petal_Length','petal_width']
df_flores.head()

#Dataframe que armazena os nomes das especies de flores, normalmente chamamos esse tipo de dado de variável y
df_especies=pd.DataFrame(iris.target)
df_especies.columns=['especie']
df_especies.head()

#Normalização com MinMaxScaler
X = MinMaxScaler().fit_transform(df_flores)
X

#Primeira Tentativa :'(
db = DBSCAN(eps=0.7, min_samples=5).fit(X)
labels = db.labels_
print(set(labels))

#Segunda Tentativa :-/
db = DBSCAN(eps=0.3, min_samples=5).fit(X)
labels = db.labels_
print(set(labels))

#Selecionando o melhor valor para o eps
neigh = NearestNeighbors(n_neighbors=2)
nbrs = neigh.fit(X)
distances, indices = nbrs.kneighbors(X)

indices

distances

distances = np.sort(distances, axis=0)
distances = distances[:,1]
plt.plot(distances)

#Terceira Tentativa com eps calibrado :-)
db = DBSCAN(eps=0.12, min_samples=5).fit(X)
labels = db.labels_
print(set(labels))

df_especies['cluster'] = db.labels_
df_especies.head(200)

y_dbscan = df_especies.cluster.values
y_real = df_especies.especie.values

#Cria um vetor de cores a serem utilzados na plotagem
colormap=np.array(['Red','green','royalblue', 'maroon'])
colormap

plt.figure(2)
#Adicona varios pontos na plotagaem utilizando as informações de sepal_Length e sepal_width como coordenadas dos pontos a serem plotados
plt.scatter(df_flores.sepal_Length, df_flores.sepal_width, c=colormap[df_especies.especie], s=100)
plt.title('Separação Real')
plt.show()

plt.scatter(X[y_dbscan == 0, 0], X[y_dbscan == 0, 1], s = 100, c = 'blue', label = 'versicolour')
plt.scatter(X[y_dbscan == 1, 0], X[y_dbscan == 1, 1], s = 100, c = 'red', label = 'setosa')
plt.scatter(X[y_dbscan == 2, 0], X[y_dbscan == 2, 1], s = 100, c = 'green', label = 'virginica')
plt.scatter(X[y_dbscan == -1, 0], X[y_dbscan == -1, 1], s = 100, c = 'black', label = 'Ruído')
plt.legend()
plt.title('Clusterização')
plt.show()

plt.scatter(df_flores.petal_Length, df_flores.petal_width, c=colormap[df_especies.especie], s=100)
plt.title('Separação Real')
plt.show()

plt.scatter(X[y_dbscan == 0, 2], X[y_dbscan == 0, 3], s = 100, c = 'blue', label = 'versicolour')
plt.scatter(X[y_dbscan == 1, 2], X[y_dbscan == 1, 3], s = 100, c = 'red', label = 'setosa')
plt.scatter(X[y_dbscan == 2, 2], X[y_dbscan == 2, 3], s = 100, c = 'green', label = 'virginica')
plt.scatter(X[y_dbscan == -1, 2], X[y_dbscan == -1, 3], s = 100, c = 'black', label = 'Ruído')
plt.legend()
plt.title('Clusterização')
plt.show()

#OU
plt.scatter(X[:, 0], X[:, 1], s = 100, c = y_dbscan.astype(np.float))

plt.scatter(X[:, 2], X[:, 3], s = 100, c = y_dbscan.astype(np.float))

#OU
vectorizer = np.vectorize(lambda x: colormap[x % len(colormap)])
plt.scatter(X[:, 0], X[:, 1], s = 100, c = vectorizer(y_dbscan))

plt.scatter(X[:,0], X[:, 1], s = 100, c = db.labels_)